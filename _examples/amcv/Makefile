##############################################################################
# amcViewer                                                                  #
##############################################################################
# vim: set list tw=78 :


# We define the ASFAMC version here, to use in conditionals later on.
#ASFAMC_VER=0.27.2
#ASFAMC_VER=0.29.1
#ASFAMC_VER=0.32.4
#ASFAMC_VER=0.32.5
#ASFAMC_VER=0.32.6
ASFAMC_VER=0.32.8
# NOTE: As of this writing, version 0.33.3 has a huge performance impact when
# interpolating, which is why it is not being used.
#ASFAMC_VER=0.33.3

# Add a define so we can bake the version string into the application.
CPPFLAGS+=-DASFAMC_VER='"${ASFAMC_VER}"'

# LOCALISED SETTINGS vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
LOCALISED_DIR=/local1/mscarpa/localised
# LOCALISED SETTINGS ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

CXX=gcc
# LOCALISED SETTINGS vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
ifdef LOCALISED
    CXX=${LOCALISED_DIR}/gcc-4.8.2_kubuntu_12.04/bin/gcc
    CPP=${LOCALISED_DIR}/gcc-4.8.2_kubuntu_12.04/bin/cpp
else
    CXX=/vol/weta/linux64/gcc/gcc-4.8.2_kubuntu_12.04/bin/gcc
    CPP=/vol/weta/linux64/gcc/gcc-4.8.2_kubuntu_12.04/bin/cpp
endif
# LOCALISED SETTINGS ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

# Use c++11.
# NOTE: As of this writing we can't, because we have to use AsfAmc 0.27.2.
ifneq ("${ASFAMC_VER}","0.27.2")
    CXXFLAGS+=-std=c++11
endif

# --- Data directory for tests -----------------------------------------------
CXXFLAGS+=-DDATADIR='"./data"'

.PHONY: clean test clean_tests clean_build clean_deps oz bin

# --- Colours for nicer output -----------------------------------------------

COLOUR_BLACK   = "\033[0;30m"
COLOUR_RED     = "\033[0;31m"
COLOUR_GREEN   = "\033[0;32m"
COLOUR_BROWN   = "\033[0;33m"
COLOUR_BLUE    = "\033[0;34m"
COLOUR_PURPLE  = "\033[0;35m"
COLOUR_CYAN    = "\033[0;36m"
COLOUR_LGREY   = "\033[0;37m"
COLOUR_GREY    = "\033[1;30m"
COLOUR_LRED    = "\033[1;31m"
COLOUR_LGREEN  = "\033[1;32m"
COLOUR_YELLOW  = "\033[1;33m"
COLOUR_LBLUE   = "\033[1;34m"
COLOUR_LPURPLE = "\033[1;35m"
COLOUR_LCYAN   = "\033[1;36m"
COLOUR_WHITE   = "\033[1;37m"
COLOUR_NONE    = "\033[0m"


# --- Colours for output in info ---------------------------------------------

INFO_BLACK   = [0;30m
INFO_RED     = [0;31m
INFO_GREEN   = [0;32m
INFO_BROWN   = [0;33m
INFO_BLUE    = [0;34m
INFO_PURPLE  = [0;35m
INFO_CYAN    = [0;36m
INFO_LGREY   = [0;37m
INFO_GREY    = [1;30m
INFO_LRED    = [1;31m
INFO_LGREEN  = [1;32m
INFO_YELLOW  = [1;33m
INFO_LBLUE   = [1;34m
INFO_LPURPLE = [1;35m
INFO_LCYAN   = [1;36m
INFO_WHITE   = [1;37m
INFO_NONE    = [0m
REW          = G


# --- Colours for awk --------------------------------------------------------

AWK_BLACK   = \033\[0;30m
AWK_RED     = \033\[0;31m
AWK_GREEN   = \033\[0;32m
AWK_BROWN   = \033\[0;33m
AWK_BLUE    = \033\[0;34m
AWK_PURPLE  = \033\[0;35m
AWK_CYAN    = \033\[0;36m
AWK_LGREY   = \033\[0;37m
AWK_GREY    = \033\[1;30m
AWK_LRED    = \033\[1;31m
AWK_LGREEN  = \033\[1;32m
AWK_YELLOW  = \033\[1;33m
AWK_LBLUE   = \033\[1;34m
AWK_LPURPLE = \033\[1;35m
AWK_LCYAN   = \033\[1;36m
AWK_WHITE   = \033\[1;37m
AWK_NONE    = \033\[0m


# --- Colours for sed --------------------------------------------------------

SED_BLACK   = \x1b\[0;30m
SED_RED     = \x1b\[0;31m
SED_GREEN   = \x1b\[0;32m
SED_BROWN   = \x1b\[0;33m
SED_BLUE    = \x1b\[0;34m
SED_PURPLE  = \x1b\[0;35m
SED_CYAN    = \x1b\[0;36m
SED_LGREY   = \x1b\[0;37m
SED_GREY    = \x1b\[1;30m
SED_LRED    = \x1b\[1;31m
SED_LGREEN  = \x1b\[1;32m
SED_YELLOW  = \x1b\[1;33m
SED_LBLUE   = \x1b\[1;34m
SED_LPURPLE = \x1b\[1;35m
SED_LCYAN   = \x1b\[1;36m
SED_WHITE   = \x1b\[1;37m
SED_NONE    = \x1b\[0m


# LOCALISED SETTINGS vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
ifdef LOCALISED
    $(shell echo \
          ${COLOUR_LRED}"*** WARNING: LOCALISED BUILD *****"${COLOUR_NONE}>&2)
endif
# LOCALISED SETTINGS ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


# --- Local code settings ----------------------------------------------------

INCLUDE_DIR=include
SRC_DIR=src
BUILD_DIR=build
TEMPLATE_DIR=templates
TEST_DIR=test
TEST_BUILD_DIR=test/build
ICONS_DIR=icons
DOCS_DIR=docs
DOCS_BUILD_DIR=${DOCS_DIR}/build
DOCS_MMD_DIR=${DOCS_BUILD_DIR}/mmd
DOCS_HTML_DIR=${DOCS_BUILD_DIR}/html
DOCS_EXAMPLES_DIR=${DOCS_BUILD_DIR}/html/examples
SH_DIR=sh

CPPFLAGS+=-I./${INCLUDE_DIR}
# This is for the special .hpp files, which are generated by this Makefile.
#CPPFLAGS+=-iquote ./${BUILD_DIR}
# NEW: The dependency generation changed slightly, and now dependencies are
# calculated earlier, so generated files can be missing at that stage.  Since
# in this case we need to use the -MG option of the pre-processor, we have to
# specify the complete relative path "build/xyz.hpp" for generated header
# files, so the -iquote option must point at the base directory ".".  Also,
# all include statements for generated header files must point at
# "build/xyz.hpp".
CPPFLAGS+=-iquote .


# Tell make where to find files based on their extensions.
#vpath %.hpp include
#vpath %.cpp src
vpath %.o   ${BUILD_DIR}

# Debugger.
ifeq (${DEBUG},1)
CXXFLAGS+=-g -O0 -DDBG
endif

# LOCALISED SETTINGS vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
ifdef LOCALISED
    GDB_BIN=${LOCALISED_DIR}/gdb-7.9/bin/gdb
else
    GDB_BIN=gdb
endif
# LOCALISED SETTINGS ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
ifeq (${CATCHTHROW},1)
DBG_CMDS+=--eval-command="catch throw"
endif
DBG_CMDS+=--eval-command=run
DBG_CMDS+=--eval-command=quit
ifeq (${GDB},1)
GDB_CMDS_FILE=gdb.commands.tmp
DBG_TEST=unset SHELL; \
	${GDB_BIN} -q ${DBG_CMDS} -d ${SRC_DIR} -d ${INCLUDE_DIR} --args
DBG_RUN=unset SHELL; \
	${GDB_BIN} -q ${DBG_CMDS} -d ${SRC_DIR} -d ${INCLUDE_DIR} --args
else
DBG_TEST=
DBG_RUN=
endif
DBG_CORE=unset SHELL; ${GDB_BIN} -q -d ${SRC_DIR} -d ${INCLUDE_DIR}


# --- Boost settings ---------------------------------------------------------

# NOTE: Use -isystem instead of -I to suppress all kinds of warnings about
# unused typedefs etc.; basically tell gcc to treat boost as a system library.
# NOTE: We used to use the oz package `boost-1.55.0', but due to requirements
# from libasfamc, we are now bound to use 1.46.1-0, which does not have a
# useable oz pak, so we're back to defining the paths here.  We'll keep the
# same names, in case we can return to using oz paks.
# NOTE: As of this writing, we are stuck with AsfAmc 0.27.2 and thus boost
# 1.46.1.
ifeq ("${ASFAMC_VER}","0.27.2")
    BOOST_VER=1.46.1
    CXXFLAGS+=-DBOOST46
else
    BOOST_VER=1.55.0
endif
# BOOST_DIR=/vol/bob/built/linux64/LI40/ext/boost/tags/boost-1_46_1-0
# BOOST_INCLUDES=${BOOST_DIR}/include
# BOOST_LIBPATH=${BOOST_DIR}/lib
# LOCALISED SETTINGS vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
ifdef LOCALISED
    BOOST_DIR=${LOCALISED_DIR}/boost-${BOOST_VER}-gcc-4.8.2
else
    BOOST_DIR=/vol/apps/libraries/boost/${BOOST_VER}/gcc-4.8.2
endif
BOOST_INCLUDES=${BOOST_DIR}/include
BOOST_LIBPATH=${BOOST_DIR}/lib
LD_PATH:=${LD_PATH}:${BOOST_DIR}/lib
# LOCALISED SETTINGS ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
CPPFLAGS+=-isystem ${BOOST_INCLUDES}
LDFLAGS+=-L${BOOST_LIBPATH}
#LDLIBS+=-lboost_system -lboost_filesystem -lboost_python \
#    -lboost_program_options -lboost_date_time -lboost_thread
LDLIBS+=${BOOST_LIBPATH}/libboost_system.a \
		${BOOST_LIBPATH}/libboost_filesystem.a \
		${BOOST_LIBPATH}/libboost_python.a \
		${BOOST_LIBPATH}/libboost_program_options.a \
		${BOOST_LIBPATH}/libboost_date_time.a \
		${BOOST_LIBPATH}/libboost_regex.a \
		${BOOST_LIBPATH}/libboost_thread.a -lutil


# --- libtiff settings -------------------------------------------------------

# LOCALISED SETTINGS vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
ifdef LOCALISED
    TIFF_DIR=${LOCALISED_DIR}/libtiff-4.0.3_64
else
    TIFF_DIR=/vol/apps/libtiff-4.0.3_64
endif
LD_PATH:=${LD_PATH}:${TIFF_DIR}/lib
# LOCALISED SETTINGS ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
CPPFLAGS+=-I${TIFF_DIR}/include
LDFLAGS+=-L${TIFF_DIR}/lib
# NOTE: We link with libtiff statically, because the oz pak is useless.
LDLIBS+=${TIFF_DIR}/lib/libtiff.a -ljpeg

# --- libpng settings --------------------------------------------------------
LDLIBS+=-lpng12
#        libpng12.so.0 => /usr/local/lib/libpng12.so.0 (0x00007f7a9771c000)


# --- Qt settings ------------------------------------------------------------

# NOTE: If we would use static QT libraries, we would lose the connection
# between Qt and PySide, i.e. PySide would not use the same Qt code as the
# main application, resulting in PySide's context being unaware of the
# existing Qt application process:
#
# >>> from PySide import QtCore
# >>> print QtCore.QCoreApplication.instance()
# None

ifeq (${DEBUG},1)
    # Dyanmic version.
    QT_VER=qt-4.8.4_dbg_64
    # Static version.
    #QT_VER=qt-4.8.4_dbg_static_64
else
    # Dyanmic version.
    QT_VER=qt-4.8.4_64
    # Static version.
    #QT_VER=qt-4.8.4_static_64
endif

# Static stuff.
#LDLIBS+= -lmng -lz -lm -ldl -pthread -lgthread-2.0 -lrt -lglib-2.0 \
#         -lpthread -lpng -lfreetype -lgobject-2.0 -lSM -lICE -lXrender \
#         -lfontconfig -lXext -lX11

# LOCALISED SETTINGS vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
ifdef LOCALISED
    #QTDIR=${LOCALISED_DIR}/qt-4.8.4_64
    QTDIR=${LOCALISED_DIR}/${QT_VER}
else
    QTDIR=/vol/apps/${QT_VER}
endif
LD_PATH:=${LD_PATH}:${QTDIR}/lib
# LOCALISED SETTINGS ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
MOC_BIN=${QTDIR}/bin/moc-qt4
MOC_DEFINES=-DQT_WEBKIT \
			-DQT_NO_DEBUG \
			-DQT_OPENGL_LIB \
			-DQT_GUI_LIB \
			-DQT_CORE_LIB \
			-DQT_SHARED
ifeq (${DEBUG},1)
	MOC_DEFINES+=-DDBG
endif
MOC_INCLUDES+=-I${QTDIR}/include/Qt
MOC_INCLUDES+=-I${QTDIR}/include/QtCore
MOC_INCLUDES+=-I${QTDIR}/include/QtGui
MOC_INCLUDES+=-I${QTDIR}/include/QtOpenGL
MOC_INCLUDES+=-I${QTDIR}/include/QtWebKit
MOC_INCLUDES+=-I${QTDIR}/include

CPPFLAGS+=-isystem ${QTDIR}/include/Qt
CPPFLAGS+=-isystem ${QTDIR}/include/QtCore
CPPFLAGS+=-isystem ${QTDIR}/include/QtGui
CPPFLAGS+=-isystem ${QTDIR}/include/QtOpenGL
CPPFLAGS+=-isystem ${QTDIR}/include/QtWebKit
CPPFLAGS+=-isystem ${QTDIR}/include
LDFLAGS+=-L${QTDIR}/lib
LDLIBS+=-lQtOpenGL -lQtGui -lQtCore -lQtWebKit


# --- GLEW settings ----------------------------------------------------------

GLEW_DIR=/local1/mscarpa/code/glew
CPPFLAGS+=-isystem ${GLEW_DIR}/include
LDFLAGS+=-L${GLEW_DIR}/lib
LDLIBS+=-lGLEW


# --- OpenGL settings --------------------------------------------------------

LDLIBS+= -lGL -lXmu -lXext -lX11

# --- freetype-gl settings ---------------------------------------------------

FREETYPEGL_DIR=/local1/mscarpa/code/freetype-gl
CPPFLAGS+=-I${FREETYPEGL_DIR}/include
LDFLAGS+=-L${FREETYPEGL_DIR}/lib
LDLIBS+=-lfreetype-gl


# --- Python settings --------------------------------------------------------

CPPFLAGS+=-I/usr/include/python2.7
LDLIBS+=/usr/lib/libpython2.7.a -lz -lssl -Xlinker -export-dynamic
#        -Xlinker -export-dynamic -Wl,-O1 -Wl,-Bsymbolic-functions -lz -lssl


# --- glm settings -----------------------------------------------------------

GLM_DIR=/local1/mscarpa/code/glm
CPPFLAGS+=-isystem ${GLM_DIR}


# --- libAmcAsf settings -----------------------------------------------------

ifeq ("${ASFAMC_VER}","0.27.2")
    BOB_DIR=/vol/bob/built/linux64/L40/code
else
    BOB_DIR=/vol/bob/built/linux64/L48/code
endif
WETA_RELEASE_DIR=/weta/prod/mocap/release/linux/libs

# NOTE: As of this writing, version 0.29.1 is broken/buggy.  This forces us to
# use version 0.27.1, which also forces us to use boost 1.46.1 and doesn't
# allow us to use c++11.  :-(

# NOTE: We're moving the definition of the ASFAMC_VER version up, in order to
# use it for some conditionals around the c++11 flag and Boost version.
#ASFAMC_VER=0.29.1
#ASFAMC_VER=0.27.2
#ASFAMC_VER=0.32.4
ifdef LOCALISED
    ASFAMC_DIR=${LOCALISED_DIR}/AsfAmc-${ASFAMC_VER}
else
    ASFAMC_DIR=${BOB_DIR}/AsfAmc/tags/AsfAmc-${ASFAMC_VER}
endif
# Special build from aharvey to work with our compiler, standard and boost.
#ASFAMC_DIR=/vol/bob/built/linux64/L48/code/AsfAmc/work/aharvey-trunk
#ASFAMC_DIR=/local1/mscarpa/code/libAsfAmc-aharvey-trunk
#ASFAMC_DIR=/local1/mscarpa/code/AsfAmc-0.29.1
# NOTE Use isystem due to warnings etc.
CPPFLAGS+=-isystem ${ASFAMC_DIR}/include
LDFLAGS+=-L${ASFAMC_DIR}/lib

ifeq ("${ASFAMC_VER}","0.27.2")
    LDLIBS+=-lasfamc
else
    #LDLIBS+=-lasfamcVP15_dbg
    LDLIBS+=-lasfamcVP15
endif

# ... libAmcAsf dependencies .................................................

# Dependency on old mocap timecode library
ifeq ("${ASFAMC_VER}","0.27.2")
    TMECDE_VER=1.0.1
    # LOCALISED SETTINGS vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
    ifdef LOCALISED
        TMECDE_DIR=${LOCALISED_DIR}/Timecode-${TMECDE_VER}
    else
        TMECDE_DIR=${WETA_RELEASE_DIR}/Timecode/${TMECDE_VER}
    endif
    # LOCALISED SETTINGS ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    CPPFLAGS+=-I${TMECDE_DIR}/qt4.8.4_gcc4.3.3/include
    LDFLAGS+=-L${TMECDE_DIR}/qt4.8.4_gcc4.3.3/lib
    LDLIBS+=-ltimecode
    LD_PATH:=${LD_PATH}:${TMECDE_DIR}/qt4.8.4_gcc4.3.3/lib
endif

# Xform
XFORM_VER=1.2.2
XFORM_DIR=${WETA_RELEASE_DIR}/Xform/${XFORM_VER}
# LOCALISED SETTINGS vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
ifdef LOCALISED
    XFORM_DIR=${LOCALISED_DIR}/Xform-${XFORM_VER}
else
    XFORM_DIR=${WETA_RELEASE_DIR}/Xform/${XFORM_VER}
endif
# LOCALISED SETTINGS ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
CPPFLAGS+=-I${XFORM_DIR}/include
LDFLAGS+=-L${XFORM_DIR}/lib
LDLIBS+=-lxform
LD_PATH:=${LD_PATH}:${XFORM_DIR}/lib

# Wtimecode
ifeq ("${ASFAMC_VER}","0.27.2")
    WTIMECODE_VER=1-1.0
else
    WTIMECODE_VER=1-1.2
endif
WTIMECODE_DIR=${BOB_DIR}/Wtimecode/tags/Wtimecode-${WTIMECODE_VER}
# LOCALISED SETTINGS vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
ifdef LOCALISED
    WTIMECODE_DIR=${LOCALISED_DIR}/Wtimecode-${WTIMECODE_VER}
else
    WTIMECODE_DIR=${BOB_DIR}/Wtimecode/tags/Wtimecode-${WTIMECODE_VER}
endif
# LOCALISED SETTINGS ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
CPPFLAGS+=-I${WTIMECODE_DIR}/include
LDFLAGS+=-L${WTIMECODE_DIR}/lib
LDLIBS+=-lWtimecode_dbg
LD_PATH:=${LD_PATH}:${WTIMECODE_DIR}/lib

# TBB
# LOCALISED SETTINGS vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
ifdef LOCALISED
    TBB_DIR=${LOCALISED_DIR}/tbb
else
    TBB_DIR=/vol/apps/intel_64/composerxe-2011.5.220/tbb
endif
# LOCALISED SETTINGS ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
CPPFLAGS+=-I$(TBB_DIR)/include
LDFLAGS+=-L$(TBB_DIR)/lib/intel64/cc4.1.0_libc2.4_kernel2.6.16.21
LDLIBS+=-ltbb
LD_PATH:=${LD_PATH}:$(TBB_DIR)/lib/intel64/cc4.1.0_libc2.4_kernel2.6.16.21

ifneq ("${ASFAMC_VER}","0.27.2")
    # New dependencies.

    # NOTE: Wgmath requires this additional define to work.
    CPPFLAGS+=-DCONST=const
    WGMATH_VER=1-6
    # LOCALISED SETTINGS vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
    ifdef LOCALISED
        WGMATH_DIR=${LOCALISED_DIR}/Wgmath-${WGMATH_VER}
    else
        WGMATH_DIR=${BOB_DIR}/Wgmath/tags/Wgmath-${WGMATH_VER}
    endif
    # LOCALISED SETTINGS ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    CPPFLAGS+=-isystem ${WGMATH_DIR}/include
    LDFLAGS+=-L${WGMATH_DIR}/lib
    LDLIBS+=-lWgmath

    WOFTEN_VER=1-4
    # LOCALISED SETTINGS vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
    ifdef LOCALISED
        WOFTEN_DIR=${LOCALISED_DIR}/Woften-${WOFTEN_VER}
    else
        WOFTEN_DIR=${BOB_DIR}/Woften/tags/Woften-${WOFTEN_VER}
    endif
    # LOCALISED SETTINGS ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    CPPFLAGS+=-isystem ${WOFTEN_DIR}/include
    LDFLAGS+=-L${WOFTEN_DIR}/lib
    LDLIBS+=-lWoften

    WEXCEPT_VER=1-5
    # LOCALISED SETTINGS vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
    ifdef LOCALISED
        WEXCEPT_DIR=${LOCALISED_DIR}/Wexcept-${WEXCEPT_VER}
    else
        WEXCEPT_DIR=${BOB_DIR}/Wexcept/tags/Wexcept-${WEXCEPT_VER}
    endif
    # LOCALISED SETTINGS ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    CPPFLAGS+=-isystem ${WEXCEPT_DIR}/include
    LDFLAGS+=-L${WEXCEPT_DIR}/lib
    LDLIBS+=-lWexcept
endif

# --- wcam settings ----------------------------------------------------------

WCAM_VER=8.0.9
# LOCALISED SETTINGS vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
ifdef LOCALISED
    WCAM_DIR=${LOCALISED_DIR}/wcam-${WCAM_VER}
else
    WCAM_DIR=${BOB_DIR}/wcam/tags/wcam-${WCAM_VER}
endif
# LOCALISED SETTINGS ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
# NOTE Use isystem due to warnings etc.
CPPFLAGS+=-isystem ${WCAM_DIR}/include
LDFLAGS+=-L${WCAM_DIR}/lib
LDLIBS+=-lWcamera

# ... wcam dependencies ......................................................

WMATH_VER=1-3
# LOCALISED SETTINGS vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
ifdef LOCALISED
    WMATH_DIR=${LOCALISED_DIR}/Wmath-${WMATH_VER}
else
    WMATH_DIR=${BOB_DIR}/Wmath/tags/Wmath-${WMATH_VER}
endif
# LOCALISED SETTINGS ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
CPPFLAGS+=-isystem ${WMATH_DIR}/include
LDFLAGS+=-L${WMATH_DIR}/lib
LDLIBS+=-lWmath


# --- Utilities --------------------------------------------------------------

# LOCALISED SETTINGS vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
ifdef LOCALISED
    COLOUR=/local1/mscarpa/code/utils/colour/colour
else
    COLOUR=$(wildcard $(shell which colour))
endif
# LOCALISED SETTINGS ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
ifeq ("${COLOUR}","")
$(warning ${INFO_LRED}*** WARNING: colour not found *************${INFO_NONE})
    COLOUR_TEST=
    COLOUR_CXX=
else
    ifeq (${GDB},1)
        COLOUR_TEST=
    else
        COLOUR_TEST=1> .unittest_output ; RC=$$? ; \
            cat .unittest_output | ${COLOUR} passed lgreen | \
            ${COLOUR} failed lred
            ifneq ("${KEEP}", "1")
                COLOUR_TEST+=; rm .unittest_output
            endif
            COLOUR_TEST+=; exit $$RC
    endif
    COLOUR_CXX=2> .cxx_output 1> .cxx_output ; RC=$$? ; \
               cat .cxx_output | ${COLOUR} error lred ;
    # Option to keep the output for use with :cf in vim.
    ifneq ("${KEEP}","1")
        COLOUR_CXX+=rm .cxx_output ;
    endif
    COLOUR_CXX+=exit $$RC
endif


# --- Automatic dependency generation ----------------------------------------

# This function will only generate dependencies within the include directory.
# This function uses the C preprocessor to list ALL the header files.  The
# advantage of this approach, is that it will give a comprehensive list of
# dependencies.  The disadvantage, is that it will also include header files
# outside the current source tree, e.g. system headers.  If we are worried of
# those headers changing as well, this would catch that.
# NOTE: The C preprocessor appears to require the -std=c++11 flag, which makes
# me wonder whether that should be in the CPPFLAGS rather than in the
# CXXFLAGS, but for now we'll keep it in CXXFLAGS and add these flags to the
# call to the C preprocessor.
# This function weeds out results from the C preprocessor that lie outside the
# current source tree (i.e. absolute file paths) from the generated list.
# Adding more output to let the user know why they're waiting.
# Further improvement: don't do anything if the file does not exist.
# IMPORTANT:  Still return the actual dependency file!
# Optional verbosity through VERBOSE variable.
# Introducing caching of dependency calculations.
# Adding caching of dependency generation source and looking for changes in
# include statements to determine *real* need to update dependency cache file.
DEPS_DIR=deps
getdeps = $(shell\
if [ -e ${1} ] ; \
then \
	if [ ! -e ${DEPS_DIR} ] ; \
	then \
		echo Creating directory ${COLOUR_LGREEN}${DEPS_DIR}${COLOUR_NONE} \
			... >&2; \
		mkdir -p ${DEPS_DIR}; \
	fi ; \
	DEPS_FILE=${DEPS_DIR}/$$(echo ${1} | tr / .).deps; \
	DEPS_COPY=$${DEPS_FILE}.src; \
	DEPS_FILE_TMP=$${DEPS_FILE}}.tmp; \
	if [ \( ! -e $${DEPS_FILE} \) -o \
			\( \( $${DEPS_FILE} -ot ${1} \) -a \
			\( -n "`diff -w -B -N --new-group-format='%>' \
					--old-group-format='%<' --unchanged-group-format='' \
					$${DEPS_COPY} ${1} | grep '\#include'`" \) \
			\) ] ; \
	then \
		if [ "${VERBOSE}" != "" ] ; \
		then \
			echo Calculating dependencies for \
			${COLOUR_GREEN}${1}${COLOUR_NONE} ... >&2; \
		fi; \
		cp ${1} $${DEPS_COPY}; \
		${CPP} ${CXXFLAGS} ${CPPFLAGS} -w -MM -MG \
		${1} 2>/dev/null > $${DEPS_FILE_TMP} ; \
		if [ $$? -ne 0 ] ; \
		then \
			echo ${COLOUR_LRED}Error calculating \
			dependencies!${COLOUR_NONE} >&2 ;\
			echo "error" ; \
			exit 1 ; \
		fi ; \
		cat $${DEPS_FILE_TMP} | cut -d: -f 2 | tr -d '\\' > $${DEPS_FILE} ; \
		rm $${DEPS_FILE_TMP} ; \
	fi; \
	cat $${DEPS_FILE} ; \
else \
	echo ${1}; \
fi)

# NOTE: It would be nice, if we could use a trimmed version of a source file,
# to check whether or not the file should be considered "modified", so as to
# avoid re-compilation, if the only changes were cosmetic (comments,
# whitespace, etc.).
# The command to generate such a "trimmed" file would be
# ${CPP} ${CXXFLAGS} ${CPPFLAGS} -fpreprocessed -P <SOURCEFILE> <TRIMMEDFILE>

# Utility to highlight dependencies that have changed.
# NOTE: The subst call is used PURELY to preserve the leading spaces before
# the string "Dependencies:" -- I have no idea how to do that better.
ifeq ("${VERBOSE}","")
listdeps =
else
listdeps = $(info $(subst ,,  Dependencies:)$(shell \
if [ -e ${1} ] ; \
then \
	echo -n ${COLOUR_BLUE} ; \
	echo -n " "${1} ; \
	for dep in ${2} ; \
	do \
		if [ \( ! -e $$dep \) -o \
			\( $$dep -nt ${1} \) ] ; \
		then \
			echo -n " "${COLOUR_LCYAN}$$dep ; \
		else \
			echo -n " "${COLOUR_BLUE}$$dep ; \
		fi ; \
	done ; \
    echo ${COLOUR_NONE} ; \
else \
	echo -n ${COLOUR_LCYAN}" "${1}" "${COLOUR_BLUE}${2}${COLOUR_NONE} ; \
fi ; \
))
endif


# Utility to generate directory-creation targets.
define makeDir
$(eval ${1}:
	$$(info Creating directory $${INFO_LGREEN}$$@$${INFO_NONE} ...)
	@mkdir -p $$@)
endef


# --- Compute source files cleverly ------------------------------------------

# List of files to ignore: handy when building while files are in progress.
# This list is meant to be easy to read and edit.
IGNORE_FILES+=main.cpp
IGNORE_FILES+=Arrow.cpp
IGNORE_FILES+=OBJLoader.cpp
IGNORE_FILES+=Drawer.cpp
IGNORE_FILES+=TextureStore.cpp

# Compute the ignore lists based on ${IGNORE_FILES}.  This assumes that fore
# every file in ${SRC_DIR}/%.cpp there might be a corresponding test file
# ${TEST_DIR}/%Test.cpp.
IGNORE_SRC_FILES:=$(patsubst %.cpp,${SRC_DIR}/%.cpp,${IGNORE_FILES})
IGNORE_TEST_SRC_FILES:=$(patsubst %.cpp,${TEST_DIR}/%Test.cpp,${IGNORE_FILES})

# Compute the actual lists of source files.
SRC_FILES=$(filter-out ${IGNORE_SRC_FILES},$(wildcard ${SRC_DIR}/*.cpp))
TEST_SRC_FILES=$(filter-out ${IGNORE_TEST_SRC_FILES},\
$(wildcard ${TEST_DIR}/*.cpp))

# Automatically calculate what headers will need moc_* files generated.
MOC_OBJECTS=$(patsubst ${INCLUDE_DIR}/%.hpp,${BUILD_DIR}/moc_%.o,\
$(shell grep -l "Q_OBJECT" $(patsubst ${SRC_DIR}/%.cpp,${INCLUDE_DIR}/%.hpp,\
${SRC_FILES})))

# Compute the list of object files.
OBJECTS=$(patsubst ${SRC_DIR}/%.cpp,${BUILD_DIR}/%.o,${SRC_FILES})

# Compute the list of test object files.
TEST_OBJECTS=$(patsubst ${TEST_DIR}/%.cpp,${TEST_BUILD_DIR}/%.o,${TEST_SRC_FILES})

# This variable will contain any files that are automatically generated and
# should be added to the dependency list.
GENERATED_FILES=

# ============================================================================


# --- Main targets -----------------------------------------------------------

all: test bin docs
# Shorthand to make targets {{test}}, {{bin}}, and {{docs}}, in that order.

clean: clean_build clean_tests clean_deps
# Shorthand to make targets {{clean_build}}, {{clean_tests}}, and
# {{clean_deps}}, in that order.

clean_deps:
# Clear the dependency files.
	$(info Deleting ${INFO_LRED}${DEPS_DIR}${INFO_NONE} ...)
	@rm -rf ${DEPS_DIR}

# For internal use only: cause execution to stop with an error.
error:
	@exit 1


debug:
	@echo SRC_FILES=${SRC_FILES}
	@echo TEST_SRC_FILES=${TEST_SRC_FILES}
	@echo MOC_OBJECTS=${MOC_OBJECTS}
	@echo OBJECTS=${OBJECTS}
	@echo GENERATED_FILES=${GENERATED_FILES}
	@echo CPPFLAGS=${CPPFLAGS}
	@echo CXXFLAGS=${CXXFLAGS}
	@echo LDFLAGS=${LDFLAGS}

test-listdeps:
	$(call listdeps,Makefile,README.md /proc/driver/rtc Makefile koala)

.SECONDEXPANSION:
test-getdeps:
	#echo "$(call getdeps,${SRC_DIR}/main.cpp)"
	#@echo
	#echo "$(call getdeps,${TEST_DIR}/AmcStoreTest.cpp)"
	#@echo
	@echo "$(call getdeps,${SRC_DIR}/GLWidget.cpp)"
	${CPP} ${CXXFLAGS} ${CPPFLAGS} -w -MM -MG \
		${SRC_DIR}/GLWidget.cpp 2>/dev/null | cut -d: -f 2 | tr -d '\\'

# Dummy target to output all library dependencies.
ldlibs:
	@echo ${LDLIBS}

# Dummy target to force execution of other targets.
FORCE:


# --- Oz stuff ---------------------------------------------------------------

# Oz requirements:
# gcc-4.8.2
# boost-1.55.0
# gdb-7.9
# qt-4.8.4_64
# pyside-qt4.8.4_1.1.1a_64
#
# For the IPython console:
# pyipython-2.1.0
# pygments-1.6

oz:
# Shorthand to set up the correct oz environment.  Use this target as:
#     {{{eval `make oz`}}}
	@/vol/wtapps/deploy/oz/shared/bin/tcsh_oz \
		--add gcc-4.8.2 --add boost-1.55.0 --add gdb-7.9 --add qt-4.8.4_64 \
		--add pyside-qt4.8.4_1.1.1b_64 \
		--add pyipython-2.1.0 --add pygments-1.6
	@echo '\n*** Use this target as "eval `make oz`" ******************\n' >&2



#	@/vol/wtapps/deploy/oz/shared/bin/tcsh_oz \
#		--add gcc-4.8.2 --add boost-1.55.0 --add gdb-7.9 --add qt-4.8.6 \
#		--add pyside-qt4.8.4_1.1.1b_64 \
#		--add pyipython-2.1.0 --add pygments-1.6
#	@echo '\n*** Use this target as "eval `make oz`" ******************\n' >&2



# --- Environment stuff ------------------------------------------------------

# NOTE: We need to add the libtiff library path to LD_LIBRARY_PATH, because
# the libtiff oz pak is useless in that regard.
env: oz
# Shorthand to set up the correct shell environment.  Use this target as:
#     {{{eval `make env`}}}
# This target depends on the target {{oz}}, so you don't need to use that,
# first.
	@echo 'setenv PATH "$${PATH}"":""$${HOME}/bin";'
	@echo 'setenv LD_LIBRARY_PATH "$${LD_LIBRARY_PATH}"":""${TIFF_DIR}/lib";'
	@echo 'setenv LD_LIBRARY_PATH "$${LD_LIBRARY_PATH}""${LD_PATH}";'
	@echo 'limit coredumpsize unlimited;'
	@echo '\n*** Use this target as "eval `make env`" ******************\n'>&2


# --- Local environment stuff ------------------------------------------------

#lenv: oz
lenv:
# Shorthand to set up the correct shell environment.  Use this target as:
#     {{{eval `make lenv`}}}
# This target depends on the target {{oz}}, so you don't need to use that,
# first.
	@echo 'setenv PATH "$${PATH}"":""/local1/mscarpa/bin";'
	@echo 'setenv LD_LIBRARY_PATH "${LD_PATH}"":""$${LD_LIBRARY_PATH}";'
	@echo 'setenv LD_LIBRARY_PATH "/vol/apps/qt-4.8.4_64/lib:/vol/apps/python/2.7/ext_modules/pyside/1.1.1.weta2/opt/gcc-4.3.3/qt/4.8.4/lib"":""$${LD_LIBRARY_PATH}";'
	@echo 'setenv PYTHONPATH "/vol/apps/python/2.7/ext_modules/pyside/1.1.1.weta2/opt/gcc-4.3.3/qt/4.8.4/lib/python2.7/site-packages";'
	@echo 'limit coredumpsize unlimited;'
	@echo '\n*** Use this target as "eval `make lenv`" *****************\n'>&2

# --- Code -------------------------------------------------------------------

# Do not automatically delete intermediate files.
.SECONDARY:

#${BUILD_DIR}/moc_%.cpp: ${INCLUDE_DIR}/%.hpp | ${BUILD_DIR}
	#$(info Generating ${INFO_LGREEN}$@${INFO_NONE} ...)
	#$(call listdeps,$@,$^)
	#@moc-qt4 ${MOC_DEFINES} ${MOC_INCLUDES} -I${INCLUDE_DIR} $^ -o $@
#.SECONDEXPANSION:
#${BUILD_DIR}/moc_%.cpp: ${INCLUDE_DIR}/%.hpp \
						#$$(call getdeps,$$(SRC_DIR)/%.cpp) | ${BUILD_DIR}
.SECONDEXPANSION:
${BUILD_DIR}/moc_%.cpp: $$(call getdeps,$${INCLUDE_DIR}/%.hpp) | ${BUILD_DIR}
	$(info Generating ${INFO_LGREEN}$@${INFO_NONE} ...)
	$(call listdeps,$@,$^)
	@${MOC_BIN} ${MOC_DEFINES} ${MOC_INCLUDES} -I${INCLUDE_DIR} $< -o $@

#${BUILD_DIR}/moc_%.o: ${BUILD_DIR}/moc_%.cpp | ${BUILD_DIR}
${MOC_OBJECTS}: ${BUILD_DIR}/moc_%.o: ${BUILD_DIR}/moc_%.cpp | ${BUILD_DIR}
	$(info Compiling ${INFO_LGREEN}$@${INFO_NONE} ...)
	$(call listdeps,$@,$^)
	@${CXX} ${CXXFLAGS} ${CPPFLAGS} -c -o $@ $< ${COLOUR_CXX}

$(call makeDir,${BUILD_DIR})


#.SECONDEXPANSION:
#${BUILD_DIR}/main.o ${OBJECTS}: ${BUILD_DIR}/%.o: $$(call getdeps,$$(SRC_DIR)/%.cpp) | ${BUILD_DIR}
.SECONDEXPANSION:
${BUILD_DIR}/%.o: $$(call getdeps,$$(SRC_DIR)/%.cpp) | ${BUILD_DIR}
	$(info Compiling ${INFO_LGREEN}$@${INFO_NONE} ...)
	$(call listdeps,$@,$^)
	@${CXX} ${CXXFLAGS} ${CPPFLAGS} -c -o $@ $< ${COLOUR_CXX}

# Dummy target to force running of the versionName.hpp target, if the git
# status has changed.  The name is chosen such as to give useful feedback when
# it is displayed by the listdeps function.
git\ status:

# NOTE: While we *could* use -D define options at compile-time, using a
# generated header helps creating a dependency that will cause other files to
# be re-compiled, so that changes to the version name will be picked up even
# when nothing else has changed.  This would not be possible using -D options.
# NOTE: For better readability, we use a template.
# NOTE: Passing "changecom" to m4 causes it to ignore comments, which in m4
# are lines that start with '#' -- obviously not great for header files.
# Since we are giving m4 an input file (the template), we need to tell it to
# read the standard input first, hence the additional '-' after the '-D'
# options and BEFORE the template file.

# NOTE: The version below breaks many things in GNU make, most importantly it
# causes it to lose track of dependencies and target instructions.  To avoid
# that, the file versionName.hpp *MUST* remain a target, as implemented below.
# This approach is kept for documentation purposes and to avoid making the
# same mistake again in six months' time.
#GIT_STATUS=$(shell git status -s -uno)
## Only set the VERSION variable, if it is not already set on the commandline.
#VERSION?=$(shell git describe --abbrev=0 | tr -d \\n)
#BRANCH=$(shell git rev-parse --abbrev-ref HEAD | tr -d \\n)
#ifeq (${GIT_STATUS},)
#    COMMIT=$(shell git log --pretty=format:'%H' -n 1)
#else
#    COMMIT=LIVE
#endif
## This info call will always execute and simply output the output from the
## shell call, which creates a temporary header file and compares it to the
## existing one.  Only if there are differences, the existing one is
## overwritten, changing the timestamp and thus causing dependencies of this
## header file to need re-building.
#$(info $(shell \
#    if ! echo "${MAKECMDGOALS}" | grep -q "clean" ; then \
#        if [ ! -d ${BUILD_DIR} ] ; then \
#            echo Creating directory ${COLOUR_LGREEN}build${COLOUR_NONE} ...; \
#            mkdir -p ${BUILD_DIR} ; \
#        fi ; \
#        echo -n "changecom" | \
#        m4 -DVERSION=${VERSION} -DCOMMIT=${COMMIT} -DBRANCH=${BRANCH} - \
#        ${TEMPLATE_DIR}/versionName.hpp > ${BUILD_DIR}/versionName.hpp.tmp ; \
#        if diff -q ${BUILD_DIR}/versionName.hpp.tmp \
#                ${BUILD_DIR}/versionName.hpp >/dev/null 2>&1 ; then \
#            if [ "${VERBOSE}" != "" ] ; then \
#                echo ${COLOUR_LGREEN}${BUILD_DIR}/versionName.hpp \
#                    ${COLOUR_NONE}is up to date. ; \
#            fi ; \
#            rm ${BUILD_DIR}/versionName.hpp.tmp ; \
#        else \
#            echo Generating ${COLOUR_LGREEN}${BUILD_DIR}/versionName.hpp\
#                ${COLOUR_NONE}... ; \
#            mv ${BUILD_DIR}/versionName.hpp.tmp \
#                ${BUILD_DIR}/versionName.hpp ; \
#        fi \
#    fi))

# NOTE: This shell execution will delete the versionName.hpp file, if it is
# outdated.  This can be either when the user explicitly specifies a VERSION
# string to use (we need to compare it with what it says in the file, because
# we ALWAYS specify a VERSION when deploying), or if the current commit SHA
# differs from that in the header file.  The deletion *should* prompt GNU make
# to rebuild the header file.
$(shell \
if [ -n "${VERSION}" ] ; then \
	if [ -e ${BUILD_DIR}/versionName.hpp ] ; then \
		CURRENT_VERSION=`grep "VERSIONNAME " ${BUILD_DIR}/versionName.hpp | \
			cut -d\" -f 2`; \
	else \
		CURRENT_VERSION="" ; \
	fi ; \
	if [ "$${CURRENT_VERSION}" != "${VERSION}" ] ; then \
		echo Deleting\
			${COLOUR_LGREEN}${BUILD_DIR}/versionName.hpp${COLOUR_NONE}\
			... >&2; \
		rm -f ${BUILD_DIR}/versionName.hpp ; \
		echo Deleting ${COLOUR_LGREEN}${BUILD_DIR}/main.o${COLOUR_NONE}\
			... >&2; \
		rm -f ${BUILD_DIR}/main.o ; \
		echo Deleting ${COLOUR_LGREEN}${BUILD_DIR}/amcviewer${COLOUR_NONE}\
			... >&2; \
		rm -f ${BUILD_DIR}/amcviewer ; \
	fi ; \
fi ; \
if [ -f ${BUILD_DIR}/versionName.hpp ] ; then \
	GIT_STATUS=`git status -s -uno` ; \
	if [ -z "$$GIT_STATUS" ] ; then \
		COMMIT=`git log --pretty=format:'%H' -n 1` ; \
	else \
		COMMIT=LIVE ; \
	fi ; \
	CURRENT_COMMIT=`grep BUILDNAME ${BUILD_DIR}/versionName.hpp | \
		cut -d\" -f 2 | cut -d\  -f 1` ; \
	if [ "$${CURRENT_COMMIT}" != "$${COMMIT}" ] ; then \
		echo Deleting ${COLOUR_LGREEN}${BUILD_DIR}/versionName.hpp\
			${COLOUR_NONE}... >&2; \
		rm -f ${BUILD_DIR}/versionName.hpp ; \
		echo Deleting ${COLOUR_LGREEN}${BUILD_DIR}/main.o\
			${COLOUR_NONE}... >&2; \
		rm -f ${BUILD_DIR}/main.o ; \
		echo Deleting ${COLOUR_LGREEN}${BUILD_DIR}/amcviewer\
			${COLOUR_NONE}... >&2; \
		rm -f ${BUILD_DIR}/amcviewer ; \
	fi ; \
fi \
)

${BUILD_DIR}/versionName.hpp: ${TEMPLATE_DIR}/versionName.hpp | ${BUILD_DIR}
	@echo Generating ${COLOUR_LGREEN}${BUILD_DIR}/versionName.hpp.tmp\
		${COLOUR_NONE}... ; \
	if [ -z "${VERSION}" ] ; then \
		VERSION=`git describe --abbrev=0 | tr -d \\n` ; \
	else \
		VERSION=${VERSION}; \
	fi ; \
	GIT_STATUS=`git status -s -uno` ; \
	BRANCH=`git rev-parse --abbrev-ref HEAD | tr -d \\n` ; \
	if [ -z "$$GIT_STATUS" ] ; then \
		COMMIT=`git log --pretty=format:'%H' -n 1` ; \
	else \
		COMMIT=LIVE ; \
	fi ; \
	echo -n "changecom" | \
	m4 -DVERSION=$${VERSION} -DCOMMIT=$${COMMIT} -DBRANCH=$${BRANCH} - \
	${TEMPLATE_DIR}/versionName.hpp > ${BUILD_DIR}/versionName.hpp.tmp ; \
	if diff -q ${BUILD_DIR}/versionName.hpp.tmp \
			${BUILD_DIR}/versionName.hpp >/dev/null 2>&1 ; then \
		if [ "${VERBOSE}" != "" ] ; then \
			echo ${COLOUR_LGREEN}${BUILD_DIR}/versionName.hpp \
				${COLOUR_NONE}is up to date. >&2; \
		fi ; \
		rm ${BUILD_DIR}/versionName.hpp.tmp ; \
	else \
		echo Generating ${COLOUR_LGREEN}${BUILD_DIR}/versionName.hpp\
			${COLOUR_NONE}... ; \
		mv ${BUILD_DIR}/versionName.hpp.tmp \
			${BUILD_DIR}/versionName.hpp >&2; \
	fi ;
GENERATED_FILES+=${BUILD_DIR}/versionName.hpp

${BUILD_DIR}/Font.cpp: fonts/Ubuntu-B.ttf | ${BUILD_DIR}
	$(info Generating ${INFO_LGREEN}$@${INFO_NONE} ...)
	$(call listdeps,$@,$^)
	@echo 'namespace amcv {' > $@ ; \
		echo '    namespace font {' >> $@ ; \
		echo '        unsigned char main[] = {' >> $@ ; \
		xxd -i < $^ >> $@ ; \
		echo '        };' >> $@ ; \
		echo -n '        unsigned int mainLen = ' >> $@ ; \
		wc -c < $^ | tr -d \\n >> $@ ; \
		echo ';' >> $@ ; \
		echo '    }' >> $@ ; \
		echo '}' >> $@

${BUILD_DIR}/Font.o: ${BUILD_DIR}/Font.cpp \
                     ${INCLUDE_DIR}/Font.hpp \
                     | ${BUILD_DIR}
	$(info Compiling ${INFO_LGREEN}$@${INFO_NONE} ...)
	$(call listdeps,$@,$^)
	@${CXX} ${CXXFLAGS} ${CPPFLAGS} -c -o $@ $< ${COLOUR_CXX}
GENERATED_FILES+=${BUILD_DIR}/Font.o

${BUILD_DIR}/Icons.cpp: $(wildcard ${ICONS_DIR}/*.png) | ${BUILD_DIR}
	$(info Generating ${INFO_LGREEN}$@${INFO_NONE} ...)
	$(call listdeps,$@,$^)
	@echo '#include "Icons.hpp"' > $@ ; \
		echo 'namespace amcv {' >> $@ ; \
		echo '    namespace icons {' >> $@ ; \
		prefix='            ' ; \
		for i in $^ ; do \
			n=`basename $$i .png`; \
			echo '        unsigned char '$$n'[] = {' >> $@ ; \
			xxd -i < $$i >> $@ ; \
			echo '        };' >> $@ ; \
			echo -n '        unsigned int '$$n'Len = ' >> $@ ; \
			wc -c < $$i | tr -d \\n >> $@ ; \
			echo ';' >> $@ ; \
			ifcode=$${ifcode}$${prefix} ; \
			prefix='            } else ' ; \
			ifcode=$${ifcode}'if (name == "'$$n'") {\n' ; \
			ifcode=$${ifcode}'                data = '$$n';\n' ; \
			ifcode=$${ifcode}'                length = '$$n'Len;\n' ; \
        done ; \
		if [ "$${ifcode}" != "" ] ; then \
			ifcode=$${ifcode}'            } else ' ; \
		else \
			ifcode=$${ifcode}'            ' ; \
		fi ; \
		ifcode=$${ifcode}'{ data = NULL; length = 0; }' ; \
		echo '        void getIcon(std::string name,' >> $@ ; \
		echo '                     unsigned char *&data,' >> $@ ; \
		echo '                     unsigned int &length) {' >> $@ ; \
		echo "$${ifcode}" >> $@ ; \
		echo '        }' >> $@ ; \
		echo '    }' >> $@ ; \
		echo '}' >> $@

${BUILD_DIR}/Icons.hpp: $(wildcard ${ICONS_DIR}/*.png) | ${BUILD_DIR}
	$(info Generating ${INFO_LGREEN}$@${INFO_NONE} ...)
	$(call listdeps,$@,$^)
	@echo '#ifndef ICON_H' > $@ ; \
		echo '#define ICON_H' >> $@ ; \
		echo '#include <string>' >> $@ ; \
		echo 'namespace amcv {' >> $@ ; \
		echo '    namespace icons {' >> $@ ; \
		for i in $^ ; do \
			n=`basename $$i .png`; \
			echo '        extern unsigned char '$$n'[];' >> $@ ; \
			echo '        extern unsigned int '$$n'Len;' >> $@ ; \
		done ; \
		echo '        void getIcon(std::string name,' >> $@ ; \
		echo '                     unsigned char *&data,' >> $@ ; \
		echo '                     unsigned int &length);' >> $@ ; \
		echo '    }' >> $@ ; \
	echo '}' >> $@ ; \
	echo '#endif /* ICON_H */' >> $@

${BUILD_DIR}/Icons.o: ${BUILD_DIR}/Icons.cpp ${BUILD_DIR}/Icons.hpp \
                      | ${BUILD_DIR}
	$(info Compiling ${INFO_LGREEN}$@${INFO_NONE} ...)
	$(call listdeps,$@,$^)
	@${CXX} ${CXXFLAGS} ${CPPFLAGS} -c -o $@ $< ${COLOUR_CXX}
GENERATED_FILES+=${BUILD_DIR}/Icons.o

#${BUILD_DIR}/amcviewer: ${GENERATED_FILES} \
                        #${MOC_OBJECTS} \
                        #${BUILD_DIR}/main.o \
                        #$(patsubst \
                          #${SRC_DIR}/%.cpp,${BUILD_DIR}/%.o,${SRC_FILES}) \
                        #| ${BUILD_DIR}
${BUILD_DIR}/amcviewer: ${GENERATED_FILES} \
                        ${MOC_OBJECTS} \
                        ${BUILD_DIR}/main.o \
                        ${OBJECTS} \
                        | ${BUILD_DIR}
	$(info Linking ${INFO_YELLOW}$@${INFO_NONE} ...)
	$(call listdeps,$@,$^)
	@${CXX} ${CXXFLAGS} ${CPPFLAGS} -o $@ $^ ${LDFLAGS} ${LDLIBS} \
		${COLOUR_CXX}
#@paplay /usr/share/sounds/freedesktop/stereo/complete.oga


# NOTE This trick allows for an easier way to pass arguments to the binary
# when using the "run" target.
# Source: http://stackoverflow.com/questions/2214575
# Check, whether the first argument is "run":
ifeq (run,$(firstword $(MAKECMDGOALS)))
  # Use the rest as arguments for "run".
  RUN_ARGS := $(wordlist 2,$(words $(MAKECMDGOALS)),$(MAKECMDGOALS))
  $(info Captured arguments: ${INFO_PURPLE}${RUN_ARGS}${INFO_NONE})
  # Turn all these arguments into do-nothing targets, so make does not
  # complain.
  $(eval $(RUN_ARGS):;@:)
  $(eval .PHONY: $(RUN_ARGS))
endif

run: ${BUILD_DIR}/amcviewer
# Shorthand to execute the binary.  Any additional targets are automatically
# converted into arguments for the binary, e.g:
#     {{{make run data/azogJump.amc}}}
# If you want to pass options to the binary, you must use the special option
# {{{--}}} first, to prevent `make' from interpreting them, e.g:
#     {{{make run -- -vb}}}
# This target depends on the target {{bin}}, so it will update the binary
# before executing it, if needed.
	$(info Executing ${INFO_PURPLE}$^ ${RUN_ARGS}${INFO_NONE} ...)
ifdef LOCALISED
	@export LD_LIBRARY_PATH="${LD_PATH}"":""$${LD_LIBRARY_PATH}"; \
	ulimit -c unlimited; \
	${DBG_RUN} $^ ${RUN_ARGS}
else
	@export LD_LIBRARY_PATH="$${LD_LIBRARY_PATH}"":""${TIFF_DIR}/lib"; \
	export LD_LIBRARY_PATH="$${LD_LIBRARY_PATH}":"${LD_PATH}"; \
	ulimit -c unlimited; \
	${DBG_RUN} $^ ${RUN_ARGS}
endif

# Command-line alias (phony target).
bin: ${BUILD_DIR}/amcviewer
# Alias for building the binary.

clean_build:
# Clear the binary build files.
	$(info Deleting ${INFO_LRED}${BUILD_DIR}${INFO_NONE} ...)
	@rm -rf ${BUILD_DIR}

core:
# Shorthand to execute the debugger and load a core file.
# Options:
#     {COREFILE} ... The core file to load, defaults to the latest file
#                  matching {{{/tmp/*core}}}.
#     {BINARY} ..... The binary file to load, defaults to the result of target
#                  {{bin}}.
	${DBG_CORE} \
		$(if ${BINARY},${BINARY},${BUILD_DIR}/amcviewer) \
		$(if ${COREFILE},${COREFILE},$(shell ls -1t /tmp/*core | head -n 1))

attach:
# Shorthand to attach a debugger instance to the currently running
# {{{amcviewer}}} process.  This will attach to the first instance found by
# {{{ps}}}.
	${DBG_CORE} ${BUILD_DIR}/amcviewer \
		$(shell ps | grep amcviewer | head -n 1 | awk '{print $1}')


# --- Unit testing -----------------------------------------------------------

$(call makeDir,${TEST_BUILD_DIR})

#.SECONDEXPANSION:
#${TEST_OBJECTS}: ${TEST_BUILD_DIR}/%.o: $$(call getdeps,$$(TEST_DIR)/%.cpp) | ${TEST_BUILD_DIR}
.SECONDEXPANSION:
${TEST_BUILD_DIR}/%.o: $$(call getdeps,$$(TEST_DIR)/%.cpp) | ${TEST_BUILD_DIR}
	$(info Compiling ${INFO_LGREEN}$@${INFO_NONE} ...)
	$(call listdeps,$@,$^)
	@${CXX} ${CXXFLAGS} ${CPPFLAGS} -c -o $@ $< ${COLOUR_CXX}

${TEST_BUILD_DIR}/unittests: \
        ${GENERATED_FILES} \
        ${MOC_OBJECTS} \
        $(patsubst ${TEST_DIR}/%.cpp,${TEST_BUILD_DIR}/%.o,${TEST_SRC_FILES})\
        $(patsubst src/%.cpp,${BUILD_DIR}/%.o,${SRC_FILES})
	$(info Linking ${INFO_YELLOW}$@${INFO_NONE} ...)
	$(call listdeps,$@,$^)
	@${CXX} ${CXXFLAGS} -o $@ $^ ${LDFLAGS} ${LDLIBS} \
		${BOOST_LIBPATH}/libboost_unit_test_framework.a \
		-lglut \
		${COLOUR_CXX}

ifdef TEST
    UNITTEST=--run_test=${TEST}
endif

# Use the global VERBOSE variable to toggle unittest verbosity.
ifeq ("${VERBOSE}","")
UNITTEST_VERBOSITY=
else
UNITTEST_VERBOSITY="--log_level=all"
endif

# NOTE: We need to redirect stderr to stdout before piping it into colour,
# otherwise the delay in the processing of colour will cause stderr messages
# to be interspersed with the rest of the output.
test: ${TEST_BUILD_DIR}/unittests
# Run unit tests.
# Options:
#     {TEST} ... Set this to the name of the test unit to run, to limit unit
#                testing to a particular test.  Multiple units can be
#                specified as a comma-separated list (without spaces).
	@echo ; \
		echo ${COLOUR_LCYAN}"*** Running unittests **********"${COLOUR_NONE};\
		${DBG_TEST} ${SH_DIR}/testwrapper --report_sink=stdout \
		${UNITTEST} ${UNITTEST_VERBOSITY} 2>&1 ${COLOUR_TEST}

#		${DBG_TEST} ${TEST_BUILD_DIR}/unittests --report_sink=stdout 

clean_tests:
# Clear the test build files.
	$(info Deleting ${INFO_LRED}${TEST_BUILD_DIR}${INFO_NONE} ...)
	@rm -rf ${TEST_BUILD_DIR}


# --- Utility targets --------------------------------------------------------

push:
# Shorthand to push from the local repository to the origin, including tags.
	@git push --follow-tags origin \
		`git rev-parse --abbrev-ref HEAD | tr -d \\n`


# --- Documentation targets --------------------------------------------------

MULTIMARKDOWN = /local1/mscarpa/bin/multimarkdown

# This feature generates help documentation for targets in the spirit of
# doc-strings in Python.  It uses awk to parse this same Makefile and extract
# all targets that have a "docstring".
help:
# Print a help message about the general usage of this Makefile.
	@echo -n \
${COLOUR_GREEN}"Generic Options"${COLOUR_NONE}"\n\
  "${COLOUR_CYAN}"VERBOSE"${COLOUR_NONE}" ......"\
               'Set this to `'"1' to get more verbose output while \n\
                executing this Makefile.\n\
  "${COLOUR_CYAN}"DEBUG"${COLOUR_NONE}" ........"\
               'Set this to `'"1' to create a debug build (debug symbols \n\
                and no optimisiation).\n\
  "${COLOUR_CYAN}"KEEP"${COLOUR_NONE}" ........."\
               'Set this to `'"1' to keep the output file from compilation\n\
                "'`'".cxx_output' (useful for use with :cf in vim).\n\
  "${COLOUR_CYAN}"LOCALISED"${COLOUR_NONE}" ...."\
               'Set this to `'"1' to work with localised copies of \n\
                dependency libraries (useful to speed builds up, and when\n\
                the network is down again).\n\
  "${COLOUR_CYAN}"GDB"${COLOUR_NONE}" .........."\
               'Set this to `'"1' to run the binary through gdb.\n\
  "${COLOUR_CYAN}"CATCHTHROW"${COLOUR_NONE}" ..."\
               'Set this to `'"1' when running the binary through gdb, in\n\
                order to catch every throw statement.\n\
  "${COLOUR_CYAN}"VERSION"${COLOUR_NONE}" ......"\
               "Set this to a string that should override the version name,\n\
                which by default is the name of the latest git tag.\n\
\n"\
${COLOUR_GREEN}"Documented Targets"${COLOUR_NONE} ;\
    awk  'BEGIN { \
              cmd = ""; \
              p = 0; \
          } \
          /^\#/ { \
              if (p==1) { \
                  if (length(cmd)) { \
                      print ""; \
                      print ${COLOUR_PURPLE}cmd${COLOUR_NONE}; \
                      cmd = "" \
                  } \
                  line = $$0; \
                  sub("# ", "  ", line); \
                  gsub("{{{", ${COLOUR_RED}, line); \
                  gsub("}}}", ${COLOUR_NONE}, line); \
                  gsub("{{", ${COLOUR_PURPLE}, line); \
                  gsub("}}", ${COLOUR_NONE}, line); \
                  gsub("{", ${COLOUR_CYAN}, line); \
                  gsub("}", ${COLOUR_NONE}, line); \
                  print line \
              } \
              next \
          } \
          /^[^#\t .][^:=()]*:[^=:]*$$/ { \
              p=1; \
              cmd=substr($$0, 0, index($$0, ":") - 1); \
              next \
          } \
          /^[^\#]/ { p = 0 } \
          /^$$/ { p = 0 } \
          END { print "" } '\
        $(CURDIR)/$(word $(words $(MAKEFILE_LIST)),$(MAKEFILE_LIST))

$(call makeDir,${DOCS_MMD_DIR})

$(call makeDir,${DOCS_HTML_DIR})

$(call makeDir,${DOCS_EXAMPLES_DIR})

docs: docs_mmd docs_html
# Generates the documentation in HTML format.

# This target creates the generated .mmd files.
# NOTE: The "concepts" section is generated by parsing all the .cpp source
# files, looking for a special comment starting with '/**CONCEPT'.
# NOTE: The "Nodes" section is generated by parsing all the .cpp source
# files, looking for a special comment starting with '/**NODE'.
# NOTE: When generating make.mmd we replace the colour escape sequences with
# multi-markdown sequences.  There is one caveat: backticks.  In
# multimarkdown, single backticks are used for delimiting code, but we need to
# be able to use the backtick inside of code blocks as well, and it appears
# that simply escaping them does not work, so we have to do some trickery: we
# first replace all backticks with the html code &#96; on those lines where
# the backtick it NOT preceded by the escape sequence for code (red).
# Furthermore, we use the four-space indentation for a code block, and the
# explicit html <code> tag for inline code text.
docs_mmd: bin | ${DOCS_MMD_DIR}
	@export LD_LIBRARY_PATH=/weta/prod/mocap/release/linux/libs/Xform/1.2.2/lib:/weta/prod/mocap/release/linux/libs/Timecode/1.0.1/qt4.8.4_gcc4.3.3/lib:/vol/apps/intel_64/composerxe-2011.5.220/tbb/lib/intel64/cc4.1.0_libc2.4_kernel2.6.16.21:/vol/apps/qt-4.8.4_64/lib:$LD_LIBRARY_PATH ; \
	export AMCV_PYTHONPATH=$PYTHONPATH ; \
	export PYTHONPATH=/vol/apps/python/2.7/ext_modules/pyside/1.1.1.weta2/opt/gcc-4.3.3/qt/4.8.4/lib/python2.7/site-packages ; \
	export AMCV_FLIPBOOKLOCATION=/proj/$FILM/$TREE/$SCENE/$SHOT/render/motion/images/amcviewer ; \
	echo Generating \
		${COLOUR_LGREEN}${DOCS_MMD_DIR}/usage.mmd${COLOUR_NONE} ... ; \
	${BUILD_DIR}/amcviewer -h > ${DOCS_MMD_DIR}/usage.mmd ; \
	echo Generating \
		${COLOUR_LGREEN}${DOCS_MMD_DIR}/meta.mmd${COLOUR_NONE} ... ; \
	echo "Version: `${BUILD_DIR}/amcviewer -l error -v`" > \
		${DOCS_MMD_DIR}/meta.mmd ; \
	echo "Build: `${BUILD_DIR}/amcviewer -l error -b`" >> \
		${DOCS_MMD_DIR}/meta.mmd ; \
	echo "Title: amcViewer `${BUILD_DIR}/amcviewer -l error -v` \
Documentation" >> ${DOCS_MMD_DIR}/meta.mmd ; \
	echo "TimeStamp: `date`" >> ${DOCS_MMD_DIR}/meta.mmd ; \
	echo "CSS: normalize.css" >> ${DOCS_MMD_DIR}/meta.mmd ; \
	echo Generating \
		${COLOUR_LGREEN}${DOCS_MMD_DIR}/examples.mmd${COLOUR_NONE} ... ; \
	echo > ${DOCS_MMD_DIR}/examples.mmd ; \
    for i in `ls docs/examples/*.py`; do \
        awk 'BEGIN { p = 0; } \
             /^\"\"\"DESCRIPTION$$/ { p = 1; next } \
             /^\"\"\"$$/ { p = 0; next} \
             { if (p == 1) { print $$0; } }' $$i >> \
            ${DOCS_MMD_DIR}/examples.mmd ; \
        echo "\n[Source](examples/"`basename $$i`")\n" >> \
            ${DOCS_MMD_DIR}/examples.mmd ; \
    done ; \
	echo Generating \
		${COLOUR_LGREEN}${DOCS_MMD_DIR}/pythonDocs.mmd${COLOUR_NONE} ... ; \
	${BUILD_DIR}/amcviewer -l warning -H \
		-e 'execfile("${DOCS_DIR}/makePythonDocs.py");\
		writeDocs(amcv, "${DOCS_MMD_DIR}/pythonDocs.mmd")' ; \
	if [ ! -e ${DOCS_MMD_DIR}/pythonDocs.mmd ] ; then exit 1 ; fi ; \
	echo Generating \
		${COLOUR_LGREEN}${DOCS_MMD_DIR}/menuDocs.mmd${COLOUR_NONE} ... ; \
	${BUILD_DIR}/amcviewer -l warning -H -p \
		-e 'execfile("${DOCS_DIR}/makeMenuDocs.py");\
		writeDocs("${DOCS_MMD_DIR}/menuDocs.mmd")' ; \
	if [ ! -e ${DOCS_MMD_DIR}/menuDocs.mmd ] ; then exit 1 ; fi ; \
	echo Generating \
		${COLOUR_LGREEN}${DOCS_MMD_DIR}/cheatSheet.mmd${COLOUR_NONE} ... ; \
	${BUILD_DIR}/amcviewer -l warning -H -p \
		-e 'execfile("${DOCS_DIR}/makeCheatSheet.py");\
		writeDocs("${DOCS_MMD_DIR}/cheatSheet.mmd")' ; \
	if [ ! -e ${DOCS_MMD_DIR}/cheatSheet.mmd ] ; then exit 1 ; fi ; \
	echo Generating \
		${COLOUR_LGREEN}${DOCS_MMD_DIR}/concepts.mmd${COLOUR_NONE} ... ; \
	rm -f ${DOCS_MMD_DIR}/concepts.mmd; \
	for i in `ls src/*.cpp`; do \
        if grep -q '/\*\*' $$i; then \
            awk  'BEGIN { \
                      p = 0; \
                  } \
                  /^\/\*\*CONCEPT/ { p = 1; print ""; next } \
                  /^ \*\// { p = 0; next } \
                  { \
                      if (p==1) { \
                          line = $$0; \
                          sub(/^ \* ?/, "", line); \
                          print line \
                      } \
                      next \
                  } \
                  END { print "" } ' $$i >> ${DOCS_MMD_DIR}/concepts.mmd; \
         fi; \
    done; \
	echo Generating \
		${COLOUR_LGREEN}${DOCS_MMD_DIR}/nodes.mmd${COLOUR_NONE} ... ; \
	rm -f ${DOCS_MMD_DIR}/nodes.mmd; \
	for i in `ls src/*.cpp`; do \
        if grep -q '/\*\*' $$i; then \
            awk  'BEGIN { \
                      p = 0; \
                  } \
                  /^\/\*\*NODE/ { p = 1; print ""; next } \
                  /^ \*\// { p = 0; next } \
                  { \
                      if (p==1) { \
                          line = $$0; \
                          sub(/^ \* ?/, "", line); \
                          print line \
                      } \
                      next \
                  } \
                  END { print "" } ' $$i >> ${DOCS_MMD_DIR}/nodes.mmd; \
         fi; \
    done; \
	echo Generating \
		${COLOUR_LGREEN}${DOCS_MMD_DIR}/make.mmd${COLOUR_NONE} ... ; \
	make -s help | sed \
		-e '/\(${SED_RED}[^`]*\)`/!s/`/\&#96;/g' \
		-e 's/${SED_GREEN}\([^\x1b]*\)${SED_NONE}/#### \1 ####/g' \
		-e 's@^${SED_PURPLE}\([^\x1b]*\)${SED_NONE}@<a name="\1">\
			</a>**\1**\n>@g' \
		-e 's/${SED_PURPLE}\([^\x1b]*\)${SED_NONE}/[\1](#\1)/g' \
		-e 's/^ \+${SED_CYAN}\([^\x1b]*\)${SED_NONE} \.\+/\n>\1\n:   /g' \
		-e 's/${SED_CYAN}\([^\x1b]*\)${SED_NONE}/**\1**/g' \
		-e 's@^ \+${SED_RED}\([^\x1b]*\)${SED_NONE} *$$@<pre><code>\1\
			</code></pre>@g' \
		-e 's@${SED_RED}\([^\x1b]*\)${SED_NONE}@`\1`@g' \
		> ${DOCS_MMD_DIR}/make.mmd ; \
	echo Generating \
		${COLOUR_LGREEN}${DOCS_MMD_DIR}/deploy.mmd${COLOUR_NONE} ... ; \
	tcsh -c './deploy.py -h > ${DOCS_MMD_DIR}/deploy.mmd'


docs_html: docs_mmd ${DOCS_DIR}/*.mmd ${DOCS_DIR}/*.css | ${DOCS_HTML_DIR} \
			${DOCS_EXAMPLES_DIR}
	$(info Copying examples ...)
	@ cp ${DOCS_DIR}/examples/*.py ${DOCS_EXAMPLES_DIR}/
	$(info Generating \
		${INFO_LGREEN}${DOCS_HTML_DIR}/pythonAPI.html${INFO_NONE} ...)
	@${MULTIMARKDOWN} --nosmart ${DOCS_DIR}/pythonAPI.mmd \
		-o ${DOCS_HTML_DIR}/pythonAPI.html

	$(info Generating \
		${INFO_LGREEN}${DOCS_HTML_DIR}/menus.html${INFO_NONE} ...)
	@${MULTIMARKDOWN} --nosmart ${DOCS_DIR}/menus.mmd \
		-o ${DOCS_HTML_DIR}/menus.html

	$(info Generating \
		${INFO_LGREEN}${DOCS_HTML_DIR}/cheatSheet.html${INFO_NONE} ...)
	@${MULTIMARKDOWN} --nosmart ${DOCS_DIR}/cheatSheet.mmd \
		-o ${DOCS_HTML_DIR}/cheatSheet.html

	$(info Generating \
		${INFO_LGREEN}${DOCS_HTML_DIR}/architecture.html${INFO_NONE} ...)
	@${MULTIMARKDOWN} --nosmart ${DOCS_DIR}/architecture.mmd \
		-o ${DOCS_HTML_DIR}/architecture.html

	$(info Generating \
		${INFO_LGREEN}${DOCS_HTML_DIR}/licenses.html${INFO_NONE} ...)
	@${MULTIMARKDOWN} --nosmart ${DOCS_DIR}/licenses.mmd \
		-o ${DOCS_HTML_DIR}/licenses.html

	$(info Generating \
		${INFO_LGREEN}${DOCS_HTML_DIR}/versionHistory.html${INFO_NONE} ...)
	@${MULTIMARKDOWN} --nosmart ${DOCS_DIR}/versionHistory.mmd \
		-o ${DOCS_HTML_DIR}/versionHistory.html

	$(info Generating ${INFO_LGREEN}${DOCS_HTML_DIR}/index.html${INFO_NONE} \
		...)
	@${MULTIMARKDOWN} --nosmart ${DOCS_DIR}/index.mmd \
		-o ${DOCS_HTML_DIR}/index.html

	@cp ${DOCS_DIR}/*.css ${DOCS_HTML_DIR}
	@cp ${DOCS_DIR}/*.png ${DOCS_HTML_DIR}
	@cp ${ICONS_DIR}/*.png ${DOCS_HTML_DIR}

lastlog:
# Displays the last log using the less pager.
	@less `ls -1t /tmp/$${USER}/amcviewer.$${USER}.*.log | head -n 1`

lastlogpath:
	@ls -1t /tmp/$${USER}/amcviewer.$${USER}.*.log | head -n 1
